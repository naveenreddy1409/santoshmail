/**
 * @NApiVersion 2.x
 * @NScriptType ScheduledScript
 * @NModuleScope SameAccount
 */
define(['N/record','N/search'],

function(record,search) {
/**
* Definition of the Scheduled script trigger point.
*
* @param {Object} scriptContext
* @param {string} scriptContext.type - The context in which the script is executed. It is one of the values from the scriptContext.InvocationType enum.
* @Since 2015.2
*/
function execute(scriptContext) {
try{
var mySearch = search.load({
    id: 'customsearch93'
    }).run().getRange(0,1);
log.debug('mySearch',mySearch[0].id);
//mySearch.length

for(var i =0;i<1;i++){

var empRec = record.load({
    type: record.Type.EMPLOYEE,
    id: mySearch[0].id //replace i with 0
   
});

log.debug('empRec',empRec);

var qty = 0;
   qty = empRec.getValue({
    fieldId: 'custentity_ccg_employee_quanity_hrs'
  });
           log.debug('qty',qty);

  var startDate = empRec.getValue({
  fieldId: 'hiredate'
  });
       log.debug('startDate',startDate);

var releaseDate = empRec.getValue({
    fieldId: 'releasedate'
    });
           log.debug('releaseDate',releaseDate?releaseDate:"No release Date");
  if(!releaseDate){
     releaseDate = new Date();
  }
  var working_days_count = getWorkingDays(startDate , releaseDate);
log.debug('working days count',working_days_count);
  var currentDate = new Date();
   var currentMonth = currentDate.getMonth() + 1;
  var currentYear = currentDate.getFullYear();
  var comapreMonth = startDate.getMonth() + 1;
  var compareYear = startDate.getFullYear();
  if(currentMonth == comapreMonth && currentYear == compareYear){
    var days_in_a_month = getDaysInMonth(currentMonth,currentYear);
   var output_qty =  (working_days_count*qty)/days_in_a_month;
     empRec.setValue({
                            fieldId: 'custentity_ccg_employee_quanity_hrs',
                            value: output_qty
                        });
  var empidsaved =  empRec.save({
      enableSourcing: true,
    ignoreMandatoryFields: true
    });
     log.debug('empidsaved',empidsaved);
  }//current if condition
 
 
 



}//for loop ends here
}catch(ex){
log.error(ex.name,ex.message);
}

}
 
  function getWorkingDays(startDate, endDate){
     var result = 0;

    var currentDate = startDate;
    while (currentDate <= endDate)  {  

        var weekDay = currentDate.getDay();
        if(weekDay != 0 && weekDay != 6)
            result++;

         currentDate.setDate(currentDate.getDate()+1);
    }

    return result;
 }//getWorkingDays function ends
  function getDaysInMonth(thisMonth,thisYear){
  var monthArray=[31,28,31,30,31,30,31,31,30,31,30,31];
  if(thisMonth!=2){return monthArray[thisMonth-1]};
  if(thisYear%4!=0){return monthArray[1]};
  if(thisYear%100==0 && thisYear%400!=0){return monthArray[1]};
  return monthArray[1]+1;
}//getDaysInMonth function ends here

return {
execute: execute
};

});



function workingDaysBetweenDates(d0, d1) { var startDate = parseDate(d0); var endDate = parseDate(d1); // Validate input if (endDate < startDate) return 0; // Calculate days between dates var millisecondsPerDay = 86400 * 1000; // Day in milliseconds startDate.setHours(0,0,0,1); // Start just after midnight endDate.setHours(23,59,59,999); // End just before midnight var diff = endDate - startDate; // Milliseconds between datetime objects var days = Math.ceil(diff / millisecondsPerDay); // Subtract two weekend days for every week in between var weeks = Math.floor(days / 7); days = days - (weeks * 2); // Handle special cases var startDay = startDate.getDay(); var endDay = endDate.getDay(); // Remove weekend not previously removed. if (startDay - endDay > 1) days = days - 2; // Remove start day if span starts on Sunday but ends before Saturday if (startDay == 0 && endDay != 6) days = days - 1 // Remove end day if span ends on Saturday but starts after Sunday if (endDay == 6 && startDay != 0) days = days - 1 return days;}function parseDate(input) { // Transform date from text to date var parts = input.match(/(\d+)/g); // new Date(year, month [, date [, hours[, minutes[, seconds[, ms]]]]]) return new Date(parts[0], parts[1]-1, parts[2]); // months are 0-based}









require(['N/record','N/search'], function (record,search) {

var mySearch = search.load({
    id: 'customsearch93'
    }).run().getRange(0,1);
log.debug('mySearch',mySearch[0].id);
//mySearch.length

for(var i =0;i<1;i++){

var empRec = record.load({
    type: record.Type.EMPLOYEE,
    id: mySearch[0].id
   
});
var qty = empRec.getValue({
    fieldId: 'custentity_ccg_employee_quanity_hrs'
  });
           log.debug('qty',qty);
var startDate = empRec.getValue({
  fieldId: 'hiredate'
  });
       log.debug('startDate',startDate);
var releaseDate = empRec.getValue({
    fieldId: 'releasedate'
    });
           log.debug('releaseDate',releaseDate?releaseDate:"No release Date");
var currentDate = new Date();
var lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth()+1, 0);

log.debug('lastDayOfMonth',lastDayOfMonth);
releaseDate = releaseDate?releaseDate:lastDayOfMonth;
log.debug('releaseDate',releaseDate);
if(releaseDate){

var workdays = releaseDate - startDate;
workdays = workdays/(1000*60*60*24);
log.debug('workdays',workdays);
/*if(workdays<30){
var ss = (workdays*qty)/30;
log.debug('ss',ss);
}*/
if(startDate!= "CurrentMonth" || releaseDate == ""){
  empRec.setValue({
  fieldId: 'custentity_ccg_employee_quanity_hrs',
        value : qty
       });
  //log.debug('Fixedqty',Fixedqty);
}
if(startDate == currentDate.getMonth() || releaseDate == ""){
  var Fixedqty2 = (workdays*qty)/30;
}
       log.debug('startDate ',currentDate+ "------"+new Date(currentDate).getMonth() );
    }


}//loop ends

log.debug('empRec',empRec);

});
